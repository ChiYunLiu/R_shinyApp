myseq_n(x, n) ->  input_val[i, 2]
n ->  input_val[i, 1]
}
ggplot2::ggplot(input_val, mapping = ggplot2::aes(x = x, y = n)) +
ggplot2::geom_line() +
ggplot2::labs(x = "n", y = "output", title = "My Sequence: c(3, 2.5, 2.7, 2.783, 2.755, 2.744, 2.748, 2.749, 2.748)") ->my_data_plot
return(my_data_plot)
}
# Test it
my_data <- tibble::tribble(
~x, ~y, ~z, ~n,
2,4,3,3,
2,4,3,4,
2,4,3,5,
2,4,3,6,
2,4,3,7,
2,4,3,8,
2,4,3,9,
2,4,3,10,
2,4,3,12)
myseq_n2(my_data)
#' 2,4,3,3,
#' 2,4,3,4,
#' 2,4,3,5,
#' 2,4,3,6,
#' 2,4,3,7,
#' 2,4,3,8,
#' 2,4,3,9,
#' 2,4,3,10,
#' 2,4,3,12)
#' myseq_df(my_data)
myseq_n2 <- function(my_data){
stopifnot(ncol(my_data) == 4 & tibble::as_tibble(my_data))
stopifnot(my_data[[4]] > 0 & as.integer(my_data[[4]]))
stopifnot(is.double(my_data[[1]]) & is.double(my_data[[2]]) & is.double(my_data[[3]]))
input_val <- tibble::tibble(x = 0, n = 0)
my_data <-  tibble::tibble(my_data)
for (i in 1:nrow(my_data)){
x = c(my_data[[i,1]], my_data[[i,2]], my_data[[i,3]])
n = my_data[[i,4]]
myseq_n(x, n) ->  input_val[i, 2]
n ->  input_val[i, 1]
}
ggplot2::ggplot(input_val, mapping = ggplot2::aes(x = x, y = n)) +
ggplot2::geom_line() +
ggplot2::labs(x = "n", y = "output", title = "My Sequence: c(3, 2.5, 2.7, 2.783, 2.755, 2.744, 2.748, 2.749, 2.748)") ->my_data_plot
return(my_data_plot)
}
# Test it
my_data <- tibble::tribble(
~x, ~y, ~z, ~n,
2,4,3,3,
2,4,3,4,
2,4,3,5,
2,4,3,6,
2,4,3,7,
2,4,3,8,
2,4,3,9,
2,4,3,10,
2,4,3,12)
myseq_n2(my_data)
install.packages("tidycensus")
library(tidycensus)
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
library(rvest)
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
best_win_elements01 <- html_nodes(html_obj,
css = ".ghost~ .text-muted+ span , .ratings-metascore , .ratings-imdb-rating strong , .genre , .certificate , .runtime , .unbold , .lister-item-header a")
head(best_win_elements01)
best_win_text01 <- html_text(best_win_elements01)
head(best_win_text01)
length(best_win_text01)
Sys.getlocale()
Sys.setenv(LANG = "en")
Sys.getenv()
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
# class(html_obj)
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
# class(html_obj)
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
# class(html_obj)
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
Sys.getlocale()
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
# class(html_obj)
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
# class(html_obj)
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc")
html_obj
# class(html_obj)
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
Sys.getlocale()
library(tidyverse)
library(httr)
library(jsonlite)
library(keyring)
# data input via API
ct_labor <- GET(url = "https://data.ct.gov/api/views/h44w-mqs3/rows.json?accessType=DOWNLOAD", apikey = key_get("datagov_API_KEY_SECURE"))
status_code(ct_labor)
# convert and tidy interest data into a tibble
ct_labor_text <- content(ct_labor, as = "text")
ct_labor_json <- fromJSON(ct_labor_text)
glimpse(ct_labor_json) # look for data
# str(ct_labor_json$data)
df_ct_labor <- as_tibble(ct_labor_json$data) # as.tibble
df_ct_labor %>%
select(V13, V16, V18) %>%
rename( publish_industry_title = `V13`, `2020` = `V16`, `2019` = `V18`) %>%
mutate(`2020` = parse_double(`2020`)) %>%
mutate(`2019` = parse_double(`2019`)) %>%
group_by(publish_industry_title) %>%
summarise(total_20 = sum(`2020`),
total_19 = sum(`2019`)) %>%
mutate(cur_1yr_diff = (total_20 - total_19)/total_19*100) %>%
arrange(cur_1yr_diff)-> job_var
job_var %>%
slice_head(n = 20) %>%
mutate(publish_industry_title = fct_reorder(publish_industry_title, cur_1yr_diff)) %>%
mutate(publish_industry_title = fct_rev(publish_industry_title)) %>%
ggplot(mapping = aes(x = cur_1yr_diff, y = publish_industry_title)) +
geom_col(position = "dodge") +
xlab("Top 20 Negative Growth in Employment \n during 2020(percentage)")+
ylab("Industry Title")
# As the plot, we select out top 20 negative growth employment industries. We can found that most of industries is consumer, entertainment, and services related industry. That seem to not surprise and quite fit the current situation. Under the worldwide pandemic, there are many restrict such as lock down and work from home. These may be a reason for these industries facing negative growth employment. Note that the relation between pandemic and employment should do further research to prove their relationship.
# The worst industry is Accommodation, minus 36%
# Driven_In: which industries have positive growth in employment?
# top 20 best
job_var %>%
slice_tail(n = 20)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref", encoding = "UTF-8")
library(rvest)
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref", encoding = "UTF-8")
html_obj
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
mv_list
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc", encoding = "UTF-8")
html_obj
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
# input data
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc", encoding = "UTF-8")
html_obj
# get winning movie list--93titles
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
best_win_elements01 <- html_nodes(html_obj,
css = ".ghost~ .text-muted+ span , .ratings-metascore , .ratings-imdb-rating strong , .genre , .certificate , .runtime , .unbold , .lister-item-header a")
head(best_win_elements01)
best_win_text01 <- html_text(best_win_elements01)
head(best_win_text01)
length(best_win_text01) ### got 760 rows not 810???????
# get all of the elements we want
best_win_elements <- html_nodes(html_obj,
css = ".ratings-imdb-rating strong , .ghost~ .text-muted+ span , .favorable , .genre , .runtime , .certificate , .unbold , .lister-item-header a")
head(best_win_elements)
best_win_text <- html_text(best_win_elements)
head(best_win_text)
length(best_win_text)
best_win_df <- tibble(text = best_win_text)
best_win_df %>%
mutate(isnum = str_detect(text, "^\\d+\\.$"))->best_win_df
#View(best_win_df)
# Check if there has 93 movies
sum(best_win_df$isnum)
# get movie numbers and remove non-movie elements
best_win_df %>%
mutate(movienum = cumsum(isnum)) %>%
filter(movienum > 0)-> best_win_df
best_win_df
# movie name & year
best_win_df %>%
mutate(isname = text %in% mv_list$movie,
isyear = str_detect(text, "\\(\\d+\\)"),
isgenre = str_detect(text, "^\\n"),
ismpaa = str_detect(text, "^[A-Z]"),
isleng = str_detect(text, "\\min$"),
isgross = str_detect(text, "\\M$"))->best_win_df
# num head . num tail
best_win_df
sum(best_win_df$isgross)
Sys.getlocale()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc", encoding = "UTF-8")
html_obj
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_list
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
Sys.setlocale(category = "LC_ALL", locale = "Chinese(Traditional)_Taiwan.950")
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "zh_TW")
Sys.getlocale()
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc", encoding = "UTF-8")
html_obj
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
Sys.getlocale()
shiny::runApp('CYL/Lectures_Class/08_09_shiny/my_first_app_class')
library(shiny)
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/inputs_and_outputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/inputs_and_outputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/inputs_and_outputs_class')
shiny::runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
setwd("~/CYL/hw_06-ChiYunLiu/housing_app")
shiny::runApp('R')
getwd
getwd()
estate <- read_csv("../data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
setwd("~/CYL/hw_06-ChiYunLiu")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
# Load and tidy data
estate <- read_csv("../data/estate.csv")
setwd("~/CYL/hw_06-ChiYunLiu/housing_app")
# Load and tidy data
estate <- read_csv("../data/estate.csv")
setwd("~/CYL/hw_06-ChiYunLiu/housing_app")
getwd()
# Load and tidy data
estate <- read_csv("../data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
# Load and tidy data
estate <- read_csv("../data/estate.csv")
# Load and tidy data
estate <- read_csv("./data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
estate01[[Lot]]
estate01[[1]]
estate01[[c(1,2)]]
runApp('R')
runApp('R')
is.numeric(estate01$`Price($K)` & estate01$Pool)
is.numeric(estate01$`Price($K)`, estate01$Pool)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
