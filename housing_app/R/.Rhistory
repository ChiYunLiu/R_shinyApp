movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
best_win_elements01 <- html_nodes(html_obj,
css = ".ghost~ .text-muted+ span , .ratings-metascore , .ratings-imdb-rating strong , .genre , .certificate , .runtime , .unbold , .lister-item-header a")
head(best_win_elements01)
best_win_text01 <- html_text(best_win_elements01)
head(best_win_text01)
length(best_win_text01) ### got 760 rows not 810???????
# get all of the elements we want
best_win_elements <- html_nodes(html_obj,
css = ".ratings-imdb-rating strong , .ghost~ .text-muted+ span , .favorable , .genre , .runtime , .certificate , .unbold , .lister-item-header a")
head(best_win_elements)
best_win_text <- html_text(best_win_elements)
head(best_win_text)
length(best_win_text)
best_win_df <- tibble(text = best_win_text)
best_win_df %>%
mutate(isnum = str_detect(text, "^\\d+\\.$"))->best_win_df
#View(best_win_df)
# Check if there has 93 movies
sum(best_win_df$isnum)
# get movie numbers and remove non-movie elements
best_win_df %>%
mutate(movienum = cumsum(isnum)) %>%
filter(movienum > 0)-> best_win_df
best_win_df
# movie name & year
best_win_df %>%
mutate(isname = text %in% mv_list$movie,
isyear = str_detect(text, "\\(\\d+\\)"),
isgenre = str_detect(text, "^\\n"),
ismpaa = str_detect(text, "^[A-Z]"),
isleng = str_detect(text, "\\min$"),
isgross = str_detect(text, "\\M$"))->best_win_df
# num head . num tail
best_win_df
sum(best_win_df$isgross)
Sys.getlocale()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc", encoding = "UTF-8")
html_obj
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_list
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
Sys.setlocale(category = "LC_ALL", locale = "Chinese(Traditional)_Taiwan.950")
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "zh_TW")
Sys.getlocale()
html_obj <- read_html("https://www.imdb.com/search/title/?count=100&groups=oscar_best_picture_winners&sort=year%2Cdesc&ref_=nv_ch_osc", encoding = "UTF-8")
html_obj
best_win_mv_elements <- html_nodes(html_obj,
css = ".lister-item-header a , .text-primary")
mv_text <- html_text(best_win_mv_elements)
tibble(text = mv_text) %>%
mutate(rownum = row_number(),
iseven = rownum %% 2 == 0,
movie_title = rep(1:93, each = 2)) %>%
select(-rownum) %>%
pivot_wider(names_from = iseven, values_from = text) %>%
select(-movie_title, "mv_num" = "FALSE", movie = "TRUE") %>%
mutate(mv_num = parse_number(mv_num))->mv_list
mv_list
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
Sys.getlocale()
shiny::runApp('CYL/Lectures_Class/08_09_shiny/my_first_app_class')
library(shiny)
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/tryputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/inputs_and_outputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/inputs_and_outputs_class')
runApp('CYL/Lectures_Class/08_09_shiny/inputs_and_outputs_class')
shiny::runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
runApp('CYL/hw_06-ChiYunLiu/mtcars_app/R')
shiny::runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp()
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp()
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
varSelectInput("y", "y", data = iris, selected = "Sepal.Length"),
varSelectInput("x", "x", data = iris, selected = "Sepal.Width"),
checkboxInput("show_str", "Show str(input$x) if X is factor?"),
verbatimTextOutput("test_str"),
verbatimTextOutput("lm_results")
)
server <- function(input, output, session) {
output$test_str <- renderPrint({
if(input$show_str){
if(is.factor(iris[[input$x]])){
str(input$x)
} # if factor
}# end if show_str
}) #end render Print
output$lm_results <- renderPrint({
lmout <- lm(iris[[input$y]] ~ iris[[input$x]], data = iris)
print(summary(lmout))
})
}
shinyApp(ui, server)
is.double(estate01)
is.double(estate01[[]])
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
library(shiny)
library(tidyverse)
library(broom)
ui <- fluidPage(
numericInput("nsamp", "Number of samples", value = 50, step = 1),
numericInput("diff", "Effect size", value = 0.5, step = 0.1),
plotOutput("plot"),
verbatimTextOutput("text")
)
server <- function(input, output) {
timer1 <- reactiveTimer(1000)
x1 <- reactive({
timer1() #note the use of ()
rnorm(n = input$nsamp, mean = 0, sd = 1)
})
x2 <- reactive({
timer1() #note the use of ()
rnorm(n = input$nsamp, mean = input$diff, sd = 1)
})
output$plot <- renderPlot({
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y") %>%
ggplot(aes(x = Group, y = y)) +
geom_boxplot() +
theme_bw()
})
output$text <- renderPrint({
t.test(x1(), x2()) %>%
tidy() %>%
select(estimate, `P-value` = p.value, Lower = conf.low, Higher = conf.high)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(broom)
ui <- fluidPage(
numericInput("nsamp", "Number of samples", value = 50, step = 1),
numericInput("diff", "Effect size", value = 0.5, step = 0.1),
plotOutput("plot"),
verbatimTextOutput("text")
)
server <- function(input, output) {
#timer1 <- reactiveTimer(1000)
x1 <- reactive({
timer1() #note the use of ()
rnorm(n = input$nsamp, mean = 0, sd = 1)
})
x2 <- reactive({
timer1() #note the use of ()
rnorm(n = input$nsamp, mean = input$diff, sd = 1)
})
output$plot <- renderPlot({
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y") %>%
ggplot(aes(x = Group, y = y)) +
geom_boxplot() +
theme_bw()
})
output$text <- renderPrint({
t.test(x1(), x2()) %>%
tidy() %>%
select(estimate, `P-value` = p.value, Lower = conf.low, Higher = conf.high)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(broom)
ui <- fluidPage(
numericInput("nsamp", "Number of samples", value = 50, step = 1),
numericInput("diff", "Effect size", value = 0.5, step = 0.1),
plotOutput("plot"),
verbatimTextOutput("text")
)
server <- function(input, output) {
#timer1 <- reactiveTimer(1000)
x1 <- reactive({
#timer1() #note the use of ()
rnorm(n = input$nsamp, mean = 0, sd = 1)
})
x2 <- reactive({
# timer1() #note the use of ()
rnorm(n = input$nsamp, mean = input$diff, sd = 1)
})
output$plot <- renderPlot({
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y") %>%
ggplot(aes(x = Group, y = y)) +
geom_boxplot() +
theme_bw()
})
output$text <- renderPrint({
t.test(x1(), x2()) %>%
tidy() %>%
select(estimate, `P-value` = p.value, Lower = conf.low, Higher = conf.high)
})
}
shinyApp(ui = ui, server = server)
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
runApp('CYL/hw_06-ChiYunLiu/housing_app/R')
is.double(estate01$Lot)
estate01
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
estate <- read_csv("../data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
getwd()
setwd("~/CYL/hw_06-ChiYunLiu/housing_app")
estate <- read_csv("../data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
# Load and tidy data
estate <- read_csv("./data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
is.double(estate01$Lot)
runApp('R')
getwd()
runApp('R')
setwd("~/CYL/hw_06-ChiYunLiu/housing_app/R")
runApp()
estate <- read_csv("../data/estate.csv")
estate %>%
mutate(AC = recode(AC,
`1` = "AC",
`0` = "No AC"),
Pool = recode(Pool,
`1` = "Pool",
`0` = "No Pool"),
Highway = recode(Highway,
`1` = "HW",
`0` = "No HW"),
Price = Price/1000,
Style = as.character(Style)) %>%
rename(`Price($K)` = Price) -> estate01
estate01 %>%
keep(~typeof(.) == "character")
keep(~typeof(estate01) == "character")
runApp()
estate01 %>% keep(~typeof(.) == "double")
runApp()
runApp()
histPlot
histPlot <- estate01 %>% keep(~typeof(.) == "double")
histPlot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
estate01 %>% keep(~typeof(.) == "character")->histPlot
histPlot
estate01 %>% keep(~typeof(.) == "double")->histPlot
histPlot
runApp()
typeof(estate01)
typeof(.)
class(estate01)
runApp()
runApp()
runApp()
glimpse(estate01)
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(tidyverse)
library(broom)
ui <- fluidPage(
numericInput("nsamp", "Number of samples", value = 50, step = 1),
numericInput("diff", "Effect size", value = 0.5, step = 0.1),
plotOutput("plot"),
verbatimTextOutput("text")
)
server <- function(input, output) {
timer1 <- reactiveTimer(1000)
x1 <- reactive({
timer1() #note the use of ()
rnorm(n = input$nsamp, mean = 0, sd = 1)
})
x2 <- reactive({
timer1() #note the use of ()
rnorm(n = input$nsamp, mean = input$diff, sd = 1)
})
output$plot <- renderPlot({
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y") %>%
ggplot(aes(x = Group, y = y)) +
geom_boxplot() +
theme_bw()
})
output$text <- renderPrint({
t.test(x1(), x2()) %>%
tidy() %>%
select(estimate, `P-value` = p.value, Lower = conf.low, Higher = conf.high)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(broom)
ui <- fluidPage(
numericInput("nsamp", "Number of samples", value = 50, step = 1),
numericInput("diff", "Effect size", value = 0.5, step = 0.1),
plotOutput("plot"),
verbatimTextOutput("text")
)
server <- function(input, output) {
x1 <- reactive({
rnorm(n = input$nsamp, mean = 0, sd = 1)
})
x2 <- reactive({
rnorm(n = input$nsamp, mean = input$diff, sd = 1)
})
output$plot <- renderPlot({
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y") %>%
ggplot(aes(x = Group, y = y)) +
geom_boxplot() +
theme_bw()
})
output$text <- renderPrint({
t.test(x1(), x2()) %>%
tidy() %>%
select(estimate, `P-value` = p.value, Lower = conf.low, Higher = conf.high)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(broom)
ui <- fluidPage(
numericInput("nsamp", "Number of samples", value = 50, step = 1),
numericInput("diff", "Effect size", value = 0.5, step = 0.1),
plotOutput("plot"),
verbatimTextOutput("text")
)
server <- function(input, output) {
x1 <- reactive({
rnorm(n = input$nsamp, mean = 0, sd = 1)
})
x2 <- reactive({
rnorm(n = input$nsamp, mean = input$diff, sd = 1)
})
output$plot <- renderPlot({
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y") %>%
ggplot(aes(x = Group, y = y)) +
geom_boxplot() +
theme_bw()
})
output$text <- renderPrint({
t.test(x1(), x2()) %>%
tidy() %>%
select(estimate, `P-value` = p.value, Lower = conf.low, Higher = conf.high)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(`1` = x1(), `2` = x2()) %>%
pivot_longer(cols = everything(),names_to = "Group", values_to = "y")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
glimpse(estate01)
runApp()
runApp()
